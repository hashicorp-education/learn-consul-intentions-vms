#!/usr/bin/env bash

# ++-----------
# ||   10 - Scenario related functions and variables
# ++------

# ++-----------------+
# || Variables       |
# ++-----------------+

## Current Implementation

## DATA FORMAT:
##    * Each scenario folder is named with the following schema: '[\d\d]_.*.env'
##    * * Each scenario folder contains files named with the following schema: 
##       '[\d\d]_.*.(env|sh)'. Those files represent the scenario.
##    * * Each scenario folder might contain other files with specific 
##        instructions for infrastructure provisioning and cleaning the idea is  
##        to have files like 'spin_infrastructure.sh' or 'test_scenario.sh' and 
##        'solve_scenario.sh' to allow automated testing.

## SCENARIO DEFINITION
## A scenario is a set of bash scripts and environment variable files that are 
## intended to be executed sequentially on a Linux VM to apply a configuration
## on a pre-existing environment. A scenario is intended to be a tool to quickly
## deploy a specific configuration on a specific infrastructure.


# ++-----------------+
# || Functions       |
# ++-----------------+

## [info] finalize flow
## Operates a scenario in the folder.
## Having the function here permits to create portable self-contained scenario
##      folders. This gives the opportunity to create different operate 
##      functions to adapt to every different platform.

## LOGIC:
## Gets `scenario_name_prefix` and looks for a scenario folder with a matching 
## name. If one is found, get a list of the files with `env` and `sh` extension 
## sorted by name and concatenates their content in a file named `operate.sh`.
## The script is then, either copied on a remote Bastion Host and executed 
## remotely, or executed locally.
##
##  Options:
##      local       Runs scenario on local node. 
##                  To be used on Bastion Host only.
##
##      remote      Runs scenario on remote node. 
##                  Relies on ${REMOTE_OPS} ==true && ${BASTION_HOST} != ""
##
##  Relies On:      00_shared_functions.env

## Internal function. Takes a string as an argument and returns the path of a 
## scenario folder with a name that matches the string. It should return an 
## empty string if no matching scenario folder is found.
_locate_scenario() {
  if [ ! -z $1 ]; then
    ## [ ] [input] Implement stricter input control
    ## [ ] [flow]  Use folder from environment 
    ## For now if more than one scenario is found, takes first alfabetical
    SCENARIO_FOLDER=`find ./scenarios/ -maxdepth 1 -name "*$1*" -type d | sort | head -1`
  fi  

  echo ${SCENARIO_FOLDER}
}

## Usage: _locate_scenario_file scenario_folder_path file_prefix
_locate_scenario_file() {
  if [ ! -z $1 ] && [ ! -z $1 ] ; then
    ## [ ] [input] Implement stricter input control 
    ## For now if more than one scenario is found, takes first alfabetical
    SCENARIO_FILE=`find $1/* -maxdepth 1 -name "*$2*" -type f | sort | head -1`
  fi  

  echo ${SCENARIO_FILE}
}

## Internal function. Takes a string as an argument and returns true if it is an 
## existing folder
_check_scenario() {
  if [ ! -z $1 ]; then
    ##  todo Implement stricter input control
    SCENARIO_FOLDER=$1

    if [ ! -d "${SCENARIO_FOLDER}" ]; then
      log_err "Scenario not found. @${FUNCNAME[0]}"
      _print_available_scenarios
      return 1
    fi

  else
    log_err "Scenario not found. @${FUNCNAME[0]}"
    _print_available_scenarios
    return 1
  fi

  return 0
}

## Internal function. Prints all available scenario.
_print_available_scenarios() {
  log_warn "List of available scenarios:`find ./scenarios/ -maxdepth 1 -type d | sed 's/.*\//\t/g' | sort `"
}

## [core] Generates `operate.sh` script.  
## Only creates script without executing it or copying it to the Bastion Host.
operate_dry() { 

  log_debug "Generate scenario prerequisites file (OPS Manual - Config runbook)"

  ## Name for the file that will contain the runbook for this phase
  RUNBOOK_FILE="operate.sh"

  log_debug "Check scenario existence..."
  if [ ! -z $1 ]; then
    SCENARIO_FOLDER=$(_locate_scenario $1)

    if _check_scenario $SCENARIO_FOLDER; then 
      ## Scenario found
      log_debug "Found scenario at ${SCENARIO_FOLDER}"

      mkdir -p ${SCENARIO_OUTPUT_FOLDER}scripts

      ## Copy variables and functions
      ##  [ ] [CHECK] Check PATHS for existence
      ## If scenario file does not exist the final script might not work.
      # echo "OPERATE_STEP=scenario_env.env" > ${SCENARIO_OUTPUT_FOLDER}scripts/operate.sh
      cat ${SCENARIO_OUTPUT_FOLDER}scenario_env.env > ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
      echo -e "\nOPERATE_STEP=00_shared_functions.env\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
      cat ./scenarios/00_shared_functions.env >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

      ## [feat]  [core_ref] Currently selecting the scenario files only by names starting with a number 
      for i in `find ${SCENARIO_FOLDER}/* -name "[0-9]*" | sort` ; do
        echo -e "\nOPERATE_STEP=`basename $i`\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
        cat $i >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
      done

      echo -e "\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
      echo 'log_debug Export scenario tuning variables on file: ${SCENARIO_OUTPUT_FOLDER}env-$1.env' >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
      echo 'print_env scenario > ${SCENARIO_OUTPUT_FOLDER}env-scenario.env' >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

      chmod +x ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

    else
      log_err "Scenario not found. @${FUNCNAME[0]}"
      _print_available_scenarios
      ## Without a scenario to run we exit before doing any damage. 
      return 1
    fi

  else
    log_err "Scenario is empty. Pass a scenario name as argument. @${FUNCNAME[0]}"
    _print_available_scenarios
    ## Without a scenario to run we exit before doing any damage. 
    return 1
  fi

  ## When reaching this line scenario file should be ready.
  return 0
}

## [core] Generates `solve.sh` script.  
## Only creates script without executing it or copying it to the Bastion Host.
solve_dry() { 

  log_debug "Generate scenario solution file (runbook)"

  ## Name for the file that will contain the runbook for this phase
  RUNBOOK_FILE="solve.sh"

  log_debug "Check scenario existence..."
  if [ ! -z $1 ]; then
    SCENARIO_FOLDER=$(_locate_scenario $1)

    if _check_scenario $SCENARIO_FOLDER; then 
      ## Scenario found
      log_debug "Found scenario at ${SCENARIO_FOLDER}"

      if [ -f "${SCENARIO_FOLDER}/${RUNBOOK_FILE}" ]; then
        log_debug "Found ${RUNBOOK_FILE}. Creating runbook."
   
        mkdir -p ${SCENARIO_OUTPUT_FOLDER}scripts

        ## Copy variables and functions
        ##  [ ] [CHECK] Check PATHS for existence
        ## If scenario file does not exist the final script might not work.
        # echo "OPERATE_STEP=scenario_env.env" > ${SCENARIO_OUTPUT_FOLDER}scripts/operate.sh
        cat ${SCENARIO_OUTPUT_FOLDER}scenario_env.env > ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
        echo -e "\nOPERATE_STEP=00_shared_functions.env\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
        cat ./scenarios/00_shared_functions.env >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

        ## [feat]  [core_ref] Currently selecting the scenario files only by names
        for i in `find ${SCENARIO_FOLDER}/* -name "${RUNBOOK_FILE}" | sort` ; do
          echo -e "\nOPERATE_STEP=`basename $i`\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
          cat $i >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
        done

        ## [ ] todo add optional output parameter using print_env

        chmod +x ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
      else
        log_err "Runbook ${RUNBOOK_FILE} not found. @${FUNCNAME[0]}"
        return 2
      fi
    else
      log_err "Scenario not found. @${FUNCNAME[0]}"
      _print_available_scenarios
      ## Without a scenario to run we exit before doing any damage. 
      return 1
    fi

  else
    log_err "Scenario is empty. Pass a scenario name as argument. @${FUNCNAME[0]}"
    _print_available_scenarios
    ## Without a scenario to run we exit before doing any damage. 
    return 1
  fi

  ## When reaching this line scenario file should be ready.
  return 0

}

## [core] Generates `test.sh` script.  
## Only creates script without executing it or copying it to the Bastion Host.
test_dry() { 

  log_debug "Generate scenario test file (runbook)"

  ## Name for the file that will contain the runbook for this phase
  RUNBOOK_FILE="test.sh"

  log_debug "Check scenario existence..."
  if [ ! -z $1 ]; then
    SCENARIO_FOLDER=$(_locate_scenario $1)

    if _check_scenario $SCENARIO_FOLDER; then 
      ## Scenario found
      log_debug "Found scenario at ${SCENARIO_FOLDER}"

      if [ -f "${SCENARIO_FOLDER}/${RUNBOOK_FILE}" ]; then
        log_debug "Found ${RUNBOOK_FILE}. Creating runbook."
   
        mkdir -p ${SCENARIO_OUTPUT_FOLDER}scripts

        ## Copy variables and functions
        ##  [ ] [CHECK] Check PATHS for existence
        ## If scenario file does not exist the final script might not work.
        # echo "OPERATE_STEP=scenario_env.env" > ${SCENARIO_OUTPUT_FOLDER}scripts/operate.sh
        cat ${SCENARIO_OUTPUT_FOLDER}scenario_env.env > ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
        echo -e "\nOPERATE_STEP=00_shared_functions.env\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
        cat ./scenarios/00_shared_functions.env >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

        ## [feat]  [core_ref] Currently selecting the scenario files only by names
        for i in `find ${SCENARIO_FOLDER}/* -name "${RUNBOOK_FILE}" | sort` ; do
          echo -e "\nOPERATE_STEP=`basename $i`\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
          cat $i >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
        done

        chmod +x ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
      else
        log_err "Runbook ${RUNBOOK_FILE} not found. @${FUNCNAME[0]}"
        return 2
      fi
    else
      log_err "Scenario not found. @${FUNCNAME[0]}"
      _print_available_scenarios
      ## Without a scenario to run we exit before doing any damage. 
      return 1
    fi

  else
    log_err "Scenario is empty. Pass a scenario name as argument. @${FUNCNAME[0]}"
    _print_available_scenarios
    ## Without a scenario to run we exit before doing any damage. 
    return 1
  fi

  ## When reaching this line scenario file should be ready.
  return 0

  ## todo: prerequisites embedding
  ## To generate self-contained scripts it would be nice to have a way to 
  ## generate the supporting scripts required by the scenario.

}

## [core] [ops] Runs runbook script on Bastion Host.  
## Runs the scenario step generated previously either on the local node or on a 
## remote node.
## It takes the file name as an argument and, after checking if a file with that
## name exists in the scripts folder, executes it.
execute_scenario_step(){

  SCENARIO_STEP=$1
  SCENARIO_FILE="${SCENARIO_OUTPUT_FOLDER}scripts/${SCENARIO_STEP}.sh"

  ## Check if scenario step file is populated
  if [ -f "${SCENARIO_FILE}" ]; then
    log_trace "Scenario located at ${SCENARIO_FILE}"

    ## Check if is dry_run or not
    if [ "${_DRY_RUN}" == "true" ]; then
     log_warn "Script is in 'dry_run' mode. No command executed."
     exit 0
    else
      if [ "${_RUN_LOCAL}" == "true" ]; then
        log "Running scenario step locally. This means you are on Bastion Host."
        ${SCENARIO_FILE}
      else
        log "Running scenario step remotely on ${BASTION_HOST}."
        
        ## The use of support scripts makes the scenario step script not portable
        ## When copying the scenario script on a remote host we need also to
        ## upload the support scripts.
        log_debug "Copying support scripts on bastion host"
        provision_scenario_supporting_scripts

        log_debug "Copying runbook file "
        remote_copy "${BASTION_HOST}" "${SCENARIO_FILE}" "~/${SCENARIO_STEP}.sh"
        log_debug "Executing runbook file "
        remote_exec "${BASTION_HOST}" "~/${SCENARIO_STEP}.sh"
      fi
      exit 0
    fi
  else
    ## If the scenario file does not exist we exit.
    log_err "Scenario file not found at ${SCENARIO_FILE}"
    log_err "Nothing will be done..."
    exit 1
  fi

}

## [core] [ops] Copy supporting scripts to Bastion Host
## Used to upload suporting scripts too when running in remote mode.
provision_scenario_supporting_scripts() {

  _support_scripts_path="scenarios/99_supporting_scripts/"
  remote_copy "${BASTION_HOST}" "${_support_scripts_path}*" "~/ops/${_support_scripts_path}"
}

