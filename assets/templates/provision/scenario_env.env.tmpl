# ++-----------
# ||   00 - Global Variables
# ++------

# ++-------------------+
# || Cloud Provider    |
# ++-------------------+

export SCENARIO_CLOUD_PROVIDER=${cloud_provider}

# ++-------------------+
# || Consul DC         |
# ++-------------------+

_consul_datacenter="${consul_datacenter}"
_consul_domain="${consul_domain}"
_server_number="${server_number}"
_retry_join="${retry_join}"
_log_level="${log_level}"

CONSUL_DATACENTER=$${_consul_datacenter:-"dc1"}
CONSUL_DOMAIN=$${_consul_domain:-"consul"}

CONSUL_SERVER_NUMBER=$${_server_number:-1}
CONSUL_RETRY_JOIN=$${_retry_join:-""}

LOG_LEVEL=$${_log_level:-2}

# ++-------------------+
# || Provision Details |
# ++-------------------+

## These define the workbench on the remote Bastion Host machine
USER="admin"
WORKDIR="/home/$${USER}/"

## [crit] [flow] CRITICAL POINT !!! - Scenario PATHS configuration
## todo: this VAR collides with the local var ASSETS 
## In case the scenario is present and execution is local 
## (which means we are running on the local machine)
ASSETS="$${WORKDIR}assets/"
LOGS="$${WORKDIR}logs/"
OPS="$${WORKDIR}ops/"

SCENARIO_OUTPUT_FOLDER="$${ASSETS}scenario/"

## Automatically accept certificates of remote nodes
SSH_OPTS="-o StrictHostKeyChecking=accept-new -o ConnectTimeout=10 -o PubkeyAcceptedAlgorithms=+ssh-rsa"
SSH_OPTS="-o StrictHostKeyChecking=accept-new -o ConnectTimeout=10"
SCP_OPTS="-o StrictHostKeyChecking=accept-new -o ConnectTimeout=10"

## This is how to locate SSH certificate on the Bastion Host
SSH_CERT="$${WORKDIR}certs/id_rsa"

# ++-------------------+
# || Bastion Services  |
# ++-------------------+

## If set to true will start the monitoring suite (Grafana, Loki, Mimir) on the
#   bastion host.
START_MONITORING_SUITE=true

# ++-------------------+
# || Consul Flow       |
# ++-------------------+